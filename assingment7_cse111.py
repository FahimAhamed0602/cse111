# -*- coding: utf-8 -*-
"""Assingment7_CSE111.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19KcSrg9P7a27o1sKkmdf7fbJbCMmxmw_

##1
"""

class Student:
  def __init__(self, name='Just a student', dept='nothing'):
    self.__name = name
    self.__department = dept
  def set_department(self, dept):
    self.__department = dept
  def get_name(self):
    return self.__name
  def set_name(self,name):
    self.__name = name
  def __str__(self):
    return 'Name: '+self.__name+' Department: '+self.__department
#write your code here
class BBA_Student(Student):
  def __init__(self,name="default",department=" BBA"):
    super().__init__(name,department)
print(BBA_Student())
print(BBA_Student('Humpty Dumpty'))
print(BBA_Student('Little Bo Peep'))

"""##2"""

class Vehicle:
  def __init__(self):
    self.x = 0
    self.y = 0
  def moveUp(self):
    self.y+=1
  def moveDown(self):
    self.y-=1
  def moveRight(self):
    self.x+=1
  def moveLeft(self):
    self.x-=1
  def __str__(self):
    return '('+str(self.x)+' , '+str(self.y)+')'
  #write your code here
class Vehicle2010(Vehicle):
  def __init__(self):
    super().__init__()
  def moveUpperRight(self):
    self.moveUp()
    self.moveRight()
  def moveUpperLeft(self):
    self.moveLeft()
    self.moveUp()
  def moveLowerRight(self):
    self.moveDown()
    self.moveRight()
  def moveLowerLeft(self):
    self.moveDown()
    self.moveLeft()
  def equals(self,other):
    if self.x==other.x and self.y==other.y:
      return True
    else:
      return False
print('Part 1')
print('------')
car = Vehicle()
print(car)
car.moveUp()
print(car)
car.moveLeft()
print(car)
car.moveDown()
print(car)
car.moveRight()
print(car)
print('------')
print('Part 2')
print('------')
car1 = Vehicle2010()
print(car1)
car1.moveLowerLeft()
print(car1)
car2 = Vehicle2010()
car2.moveLeft()
print(car1.equals(car2))
car2.moveDown()
print(car1.equals(car2))

𝐃𝐫𝐢𝐯𝐞𝐫 𝐂𝐨𝐝𝐞:
class Player:
     def init(self,name,goalsScored,tacklesWon):
         self.name = name
         self.goalsScored = goalsScored
         self.tacklesWon = tacklesWon
         self.point=0
     def calculatePoint(self):
         self.point+=(self.goalsScored4)+(self.tacklesWon3)


# 𝐖𝐫𝐢𝐭𝐞 𝐲𝐨𝐮𝐫 𝐜𝐨𝐝𝐞 𝐡𝐞𝐫𝐞

print('=========================')
p1 = Defender("Thiago Silva",5,12,8.5)
print('=========================')
p2 = Attacker("Cristiano Ronaldo",14,5,9.0)
print('=========================')
p3 = Attacker("Lionel Messi",12,9,9.5)
print('=========================')
p1.calculatePoint()
print('=========================')
p2.calculatePoint()
print('=========================')
p3.calculatePoint()

𝐎𝐮𝐭𝐩𝐮𝐭:
=========================
Name: Thiago Silva ,Rating: 8.5
=========================
Name: Cristiano Ronaldo ,Rating: 9.0
=========================
Name: Lionel Messi ,Rating: 9.5
=========================
Point of  Thiago Silva : 73.0
=========================
Point of  Cristiano Ronaldo : 89.0
=========================
Point of  Lionel Messi : 94.0
𝐃𝐫𝐢𝐯𝐞𝐫 𝐂𝐨𝐝𝐞:
class Player:
     def __init__(self,name,goalsScored,tacklesWon):
         self.name = name
         self.goalsScored = goalsScored
         self.tacklesWon = tacklesWon
         self.point=0
     def calculatePoint(self):
         self.point+=(self.goalsScored*4)+(self.tacklesWon*3)


# 𝐖𝐫𝐢𝐭𝐞 𝐲𝐨𝐮𝐫 𝐜𝐨𝐝𝐞 𝐡𝐞𝐫𝐞

print('=========================')
p1 = Defender("Thiago Silva",5,12,8.5)
print('=========================')
p2 = Attacker("Cristiano Ronaldo",14,5,9.0)
print('=========================')
p3 = Attacker("Lionel Messi",12,9,9.5)
print('=========================')
p1.calculatePoint()
print('=========================')
p2.calculatePoint()
print('=========================')
p3.calculatePoint()

𝐎𝐮𝐭𝐩𝐮𝐭:
=========================
Name: Thiago Silva ,Rating: 8.5
=========================
Name: Cristiano Ronaldo ,Rating: 9.0
=========================
Name: Lionel Messi ,Rating: 9.5
=========================
Point of  Thiago Silva : 73.0
=========================
Point of  Cristiano Ronaldo : 89.0
=========================
Point of  Lionel Messi : 94.0

class Player:
    def __init__(self,name,goalsScored,tacklesWon):
        self.name = name
        self.goalsScored = goalsScored
        self.tacklesWon = tacklesWon
        self.point=0
    def calculatePoint(self):
        self.point+=(self.goalsScored*4)+(self.tacklesWon*3)

class Defender(Player):
    def __init__(self,name,goalsScored,tacklesWon,rate):
        super().__init__(name,goalsScored,tacklesWon)
        self.rate=rate
        print('Name:',self.name,',ratting:',self.rate)
    def calculatePoint(self):
        self.rate+=((self.goalsScored*4)+(self.tacklesWon*3)+self.rate)
        print('points of',self.name,'points:',self.rate)
class Attacker(Player):
    def __init__(self,name,goalsScored,tacklesWon,rate):
        super().__init__(name,goalsScored,tacklesWon)
        self.rate=rate
        print('Name:',self.name,',ratting:',self.rate)
    def calculatePoint(self):
        self.rate+=((self.goalsScored*4)+(self.tacklesWon*3)+self.rate)
        print('points of',self.name,'points:',self.rate)


print('=========================')
p1 = Defender("Thiago Silva",5,12,8.5)
print('=========================')
p2 = Attacker("Cristiano Ronaldo",14,5,9.0)
print('=========================')
p3 = Attacker("Lionel Messi",12,9,9.5)
print('=========================')
p1.calculatePoint()
print('=========================')
p2.calculatePoint()
print('=========================')
p3.calculatePoint()



"""##3"""

class Tournament:
  def __init__(self,name='Default'):
    self.__name = name
  def set_name(self,name):
    self.__name = name
  def get_name(self):
    return self.__name
      #write your code here

class Cricket_Tournament(Tournament):
  def __init__(self,name="Default",team=0,type="No type"):
    self.team=team
    self.type=type
    super().__init__(name)

  def detail(self):
    return "Cricket Tournament Name:"+self.get_name()+"\nNumber of Teams:"+str(self.team)+"\nType:"+self.type

class Tennis_Tournament(Tournament):
  def __init__(self,name,number):
    self.number=number
    super().__init__(name)

  def detail(self):
    return "Tennis Tournament Name:"+self.get_name()+"\nNumber of Players:"+str(self.number)


ct1 = Cricket_Tournament()
print(ct1.detail())
print("-----------------------")
ct2 = Cricket_Tournament("IPL",10,"t20")
print(ct2.detail())
print("-----------------------")
tt = Tennis_Tournament("Roland Garros",128)
print(tt.detail())

"""##67"""

class Tournament:
  def __init__(self,name='Default'):
    self.__name = name
  def set_name(self,name):
    self.__name = name
  def get_name(self):
    return self.__name
  #write your code here
class Cricket_Tournament(Tournament):
  def __init__(self,*arg):
    if len(arg)!=0:
      super().__init__(arg[0])

  def detail(self):
    return "Cricket Tournament Name:"+self.get_name()

# class Tennis_Tournment(Tournament):
#   def __init__(self,name,number):
#     self.number=number
#     super().__init__(self,name)
#   def detail(self):
#     return "Tennis Tournament Name:"+self.name,"Number of Players:"+str(self.number)
ct1 = Cricket_Tournament()
print(ct1.detail())
print("-----------------------")
ct2 = Cricket_Tournament("IPL",10,"t20")
print(ct2.detail())
print("-----------------------")
# tt = Tennis_Tournament("Roland Garros",128)
# print(tt.detail())

"""##4"""

class Product:
  def __init__(self,id, title, price):
    self.__id = id
    self. __title = title
    self. __price = price
  def get_id_title_price(self):
    return "ID: "+str(self.__id)+" Title:"+self.__title+"Price: "+str(self.__price)
#write your code here
class Book(Product):
  def __init__(self,id,title,price,isbn,p):
    self.isbn=isbn
    self.p=p
    super().__init__(id,title,price)
  def printDetail(self):
    return self.get_id_title_price()+"  ISBN:"+self.isbn+"  Publisher:"+self.p

class CD(Product):
  def __init__(self,id,title,price,b,time,g):
    self.b=b
    self.time=time
    self.g=g
    super().__init__(id,title,price)
  def printDetail(self):
    return self.get_id_title_price()+"  Band:"+self.b+" Duration:"+str(self.time)+" Genre:"+str(self.g)


book = Book(1,"The Alchemist",500,"97806","HarperCollins")
print(book.printDetail())
print("-----------------------")
cd = CD(2,"Shotto",300,"Warfaze",50,"Hard Rock")
print(cd.printDetail())

"""##5"""

class Animal:
  def __init__(self,sound):
    self.__sound = sound
  def makeSound(self):
    return self.__sound

class Printer:
  def printSound(self, a):
    print(a.makeSound())
#write your code here
class Dog(Animal):
  pass
class Cat(Animal):
  pass
d1 = Dog('bark')
c1 = Cat('meow')
a1 = Animal('Animal does not make sound')
pr = Printer()
pr.printSound(a1)
pr.printSound(c1)
pr.printSound(d1)

"""##6"""

class Shape:
  def __init__(self, name='Default', height=0, base=0):
    self.area = 0
    self.name = name
    self.height = height
    self.base = base
  def get_height_base(self):
    return "Height: "+str(self.height)+",Base: "+str(self.base)
  def calcArea(self,area=0.0):
    if self.name=="Triangle":
      self.area=0.5*self.height*self.base
    elif self.name=='Trapezoid':
      self.area=0.5*self.height*(self.base+self.side)
  def printDetail(self):
    return "Shape name:"+self.name+"\nHeight:"+str(self.height)+","+"Base:"+str(self.base)+"\nArea:"+str(self.area)

#write your code here
class triangle(Shape):
  def __init__(self,name='Default', height=0, base=0):
    super().__init__(name,height,base)
class trapezoid(Shape):
  def __init__(self,name='Default', height=0, base=0,side=0):
    self.side=side
    super().__init__(name,height,base)


tri_default = triangle()
tri_default.calcArea()
print(tri_default.printDetail())
print('--------------------------')
tri = triangle('Triangle', 10, 5)
tri.calcArea()
print(tri.printDetail())
print('---------------------------')
trap = trapezoid('Trapezoid', 10, 6, 4)
trap.calcArea()
print(trap.printDetail())

"""##7"""

class Football:
  def __init__(self, team_name, name, role):
    self.__team = team_name
    self.__name = name
    self.role = role
    self.earning_per_match = 0
  def get_name_team(self):
    return 'Name: '+self.__name+', Team Name: ' +self.__team

# write your code here
class Player(Football):
  def __init__(self,team_name, name, role,tg,tp,r=None):
    self.tg=tg
    self.tp=tp
    self.r=r
    super().__init__(team_name, name, role)
  def calculate_ratio(self):
    self.r=self.tg/self.tp
    return self.r
  def print_details(self):
    v=self.tg*1000+self.tp*100
    print(self.get_name_team(),"\nTeam Role:",self.role,"\nTotal Goal:",self.tg,","+"Total Played:",self.tp,"\nGoal Ratio:",self.r,"\nMatch Earning:"+str(v)+"K")

class Manager(Football):
  def __init__(self,team_name, name, role,tw):
    self.tw=tw
    super().__init__(team_name, name, role)
  def print_details(self):
    v=self.tw*1000
    print(self.get_name_team(),"\nTeam Role:",self.role,"\nTotal Win:",self.tw,"\nMatch Earning:"+str(v)+"K")

player_one = Player('Juventus', 'Ronaldo', 'Striker', 25, 32)
player_one.calculate_ratio()
player_one.print_details()
print('------------------------------------------')
manager_one = Manager('Real Madrid', 'Zidane', 'Manager', 25)
manager_one.print_details()

a=[333,2221,abba,wewe,qwewq]
l=[]
for i in (a):
  print(i)

class Shape:
  def __init__(self, name='Default', height=0, base=0):
    self.area = 0
    self.name = name
    self.height = height
    self.base = base
  def get_height_base(self):
    return "Height: "+str(self.height)+",Base: "+str(self.base)

class Triangle(Shape):

  def __init__(self,width=0,height=0):
    self.width=width
    self.height=height
    super().__init__(name,height,base)
  def calcArea(self):
    return(self.width*self.height)/2
  def printDetail(self):
    return "Shape name:"+self.name+"\nHeight:"+str(self.height)+","+"Base:"+str(self.base)+"\nArea:"+str(self.area)
class Trapezoid(Shape):
    def __init__(self,base=0,height=0):
      self.base=base
      self.height=height
    def calcArea(self):
        return((self.base+self.base)/2)*self.height
    def printDetail(self):
      return "Shape name:"+self.name+"\nHeight:"+str(self.height)+","+"Base:"+str(self.base)+"\nArea:"+str(self.area)
tri_default = Triangle()
tri_default.calcArea()
print(tri_default.printDetail())
print('--------------------------')
tri = Triangle('Triangle', 10, 5)
tri.calcArea()
print(tri.printDetail())
print('---------------------------')
trap = Trapezoid('Trapezoid', 10, 6, 4)
trap.calcArea()
print(trap.printDetail())

class Tournament:
    def __init__(self,name='Default'):
        self.__name = name
    def set_name(self,name):
        self.__name = name
    def get_name(self):
        return self.__name

class Cricket_Tournament(Tournament):
    def __init__(self):
        self.__name1=name
    def set_name(self,name):
        self.name=name
    def get_name(self):
        return self.__name

class Tennis_Tournament(Tournament):
    def __init__(self,Roland Garros,128):
        self.__name=name
    def set_name(self,name):
        self.name=name
    def get_name(self):
        return self.__name
ct1 = Cricket_Tournament()
print(ct1.detail())
print("-----------------------")
ct2 = Cricket_Tournament("IPL",10,"t20")
print(ct2.detail())
print("-----------------------")
tt = Tennis_Tournament("Roland Garros",128)
print(tt.detail())